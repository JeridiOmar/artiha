Index: src/Repository/PostRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Repository;\r\n\r\nuse App\\Entity\\Post;\r\nuse App\\Entity\\User;\r\nuse App\\Search\\SearchEntity;\r\nuse App\\Search\\SearchHome;\r\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\r\nuse Doctrine\\Persistence\\ManagerRegistry;\r\nuse Knp\\Component\\Pager\\Pagination\\PaginationInterface;\r\nuse Knp\\Component\\Pager\\PaginatorInterface;\r\nuse phpDocumentor\\Reflection\\Types\\This;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\n\r\n/**\r\n * @method Post|null find($id, $lockMode = null, $lockVersion = null)\r\n * @method Post|null findOneBy(array $criteria, array $orderBy = null)\r\n * @method Post[]    findAll()\r\n * @method Post[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\r\n */\r\nclass PostRepository extends ServiceEntityRepository\r\n{\r\n    /**\r\n     * @var PaginatorInterface\r\n     */\r\n    private $paginator;\r\n\r\n    public function __construct(ManagerRegistry $registry, PaginatorInterface $paginator)\r\n    {\r\n        parent::__construct($registry, Post::class);\r\n        $this->paginator = $paginator;\r\n    }\r\n\r\n    /**\r\n     * @param SearchHome $search\r\n     * @return PaginationInterface\r\n     */\r\n    public function findSearch(SearchHome $search): PaginationInterface\r\n    {\r\n        $query = $this\r\n            ->createQueryBuilder('p')\r\n            ->select('c', 'p')\r\n            ->join('p.Categories', 'c');\r\n        if (!empty($search->getMin())) {\r\n            $query = $query\r\n                ->andWhere('p.nblikes >= :min')\r\n                ->setParameter('min', $search->getMin());\r\n        }\r\n        if (!empty($search->getMax())) {\r\n            $query = $query\r\n                ->andWhere('p.nblikes <= :max')\r\n                ->setParameter('max', $search->getMax());\r\n        }\r\n        if (!empty($search->getCategories())) {\r\n            $query = $query\r\n                ->andWhere('c.id IN (:categories)')\r\n                ->setParameter('categories', $search->getCategories());\r\n        }\r\n\r\n        $results = $query->getQuery();\r\n        return $this->paginator->paginate(\r\n            $results,\r\n            $search->page,\r\n            10\r\n        );\r\n    }\r\n\r\n    public function findCategory(SearchHome $search, Request $request)\r\n    {\r\n        $query = $this\r\n            ->createQueryBuilder('p')\r\n            ->select('c', 'p')\r\n            ->join('p.Categories', 'c');\r\n\r\n        if (!empty($search->getCategories())) {\r\n            $query = $query\r\n                ->andWhere('c.id IN (:categories)')\r\n                ->setParameter('categories', $search->getCategories());\r\n        }\r\n\r\n        $results = $query->getQuery();\r\n        return $this->paginator->paginate(\r\n            $results,\r\n            $request->query->getInt('page', 1), /*page number*/\r\n            10\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n     * @param SearchEntity $search\r\n     * @param Request $request\r\n     * @return PaginationInterface\r\n     */\r\n    public function findByTagName(SearchEntity $search,Request $request):PaginationInterface\r\n    {\r\n        $query = $this\r\n            ->createQueryBuilder('p')\r\n            ->select('t', 'p')\r\n            ->join('p.tags', 't');\r\n        $query = $query\r\n            ->andWhere('t.value IN (:tag)')\r\n            ->setParameter('tag', $search->motCle);\r\n\r\n\r\n        $results = $query->getQuery();\r\n        return $this->paginator->paginate(\r\n            $results,\r\n            $request->query->getInt('page', 1), /*page number*/\r\n            10\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param SearchEntity $search\r\n     * @param Request $request\r\n     * @return PaginationInterface\r\n     */\r\n    public function findByPostTitle(SearchEntity $search,Request $request): PaginationInterface\r\n    {\r\n        $query = $this\r\n            ->createQueryBuilder('p')\r\n            ->select('p')\r\n            ->Where('p.title LIKE :motCle')\r\n            ->setParameter('motCle', \"%{$search->motCle}%\");\r\n        $results = $query->getQuery();\r\n        return $this->paginator->paginate(\r\n            $results,\r\n            $request->query->getInt('page', 1), /*page number*/\r\n            10\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param SearchEntity $search\r\n     * @param Request $request\r\n     * @return PaginationInterface\r\n     */\r\n    public function findDescriptipn(SearchEntity $search, Request $request): PaginationInterface\r\n    {\r\n        $query = $this\r\n            ->createQueryBuilder('p')\r\n            ->select('p')\r\n            ->Where('p.description LIKE :motCle')\r\n            ->setParameter('motCle', \"%{$search->motCle}%\");\r\n        $results = $query->getQuery();\r\n        return $this->paginator->paginate(\r\n            $results,\r\n            $request->query->getInt('page', 1), /*page number*/\r\n            10\r\n        );\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * @param UserInterface|null $user\r\n     * @param Request $request\r\n     * @param SearchHome $search\r\n     * @return PaginationInterface\r\n     */\r\n\r\n    public function findPost(?UserInterface $user, Request $request, SearchHome $search):PaginationInterface\r\n    {\r\n\r\n        $query = $this\r\n            ->createQueryBuilder('p')\r\n            ->select('u', 'p')\r\n            ->join('p.user', 'u')\r\n        ->andWhere('u.id IN (:motCle)')\r\n        ->setParameter('motCle', $user->getSubscribedTo());\r\n        if (!empty($search->getMin())) {\r\n            $query = $query\r\n                ->andWhere('p.nblikes >= :min')\r\n                ->setParameter('min', $search->getMin());\r\n        }\r\n        if (!empty($search->getMax())) {\r\n            $query = $query\r\n                ->andWhere('p.nblikes <= :max')\r\n                ->setParameter('max', $search->getMax());\r\n        }\r\n        if (!empty($search->getCategories())) {\r\n            $query = $query\r\n                ->andWhere('c.id IN (:categories)')\r\n                ->setParameter('categories', $search->getCategories());\r\n        }\r\n\r\n        $results = $query->getQuery();\r\n        return $this->paginator->paginate(\r\n            $results,\r\n            $request->query->getInt('page', 1), /*page number*/\r\n            10\r\n        );\r\n\r\n\r\n    }\r\n\r\n    public function findPostById($id){\r\n        $query = $this\r\n            ->createQueryBuilder('p')\r\n            ->select('p')\r\n            ->andWhere('p.id IN (:postId)')\r\n            ->setParameter('postId', $id);\r\n        $result = $query->getQuery();\r\n        return $result->getResult();\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Repository/PostRepository.php	(revision f7dbde30bc7518711944450c8442e846df249c56)
+++ src/Repository/PostRepository.php	(date 1593300189348)
@@ -3,6 +3,7 @@
 namespace App\Repository;
 
 use App\Entity\Post;
+use App\Entity\Tag;
 use App\Entity\User;
 use App\Search\SearchEntity;
 use App\Search\SearchHome;
@@ -207,7 +208,24 @@
         return $result->getResult();
     }
 
+    public function findPostByTag(Tag $tag, Request $request)
+    {
+        $query = $this
+            ->createQueryBuilder('p')
+            ->select('t', 'p')
+            ->join('p.tags', 't');
+        $query = $query
+            ->andWhere('p.tags IN (:tag)')
+            ->setParameter('id', $tag->getValue());
 
+
+        $results = $query->getQuery();
+        return $this->paginator->paginate(
+            $results,
+            $request->query->getInt('page', 1), /*page number*/
+            10
+        );
+    }
 
 
 }
Index: src/Repository/TagRepository.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Repository;\r\n\r\nuse App\\Entity\\Tag;\r\nuse Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;\r\nuse Doctrine\\Persistence\\ManagerRegistry;\r\n\r\n/**\r\n * @method Tag|null find($id, $lockMode = null, $lockVersion = null)\r\n * @method Tag|null findOneBy(array $criteria, array $orderBy = null)\r\n * @method Tag[]    findAll()\r\n * @method Tag[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)\r\n */\r\nclass TagRepository extends ServiceEntityRepository\r\n{\r\n    public function __construct(ManagerRegistry $registry)\r\n    {\r\n        parent::__construct($registry, Tag::class);\r\n    }\r\n\r\n    // /**\r\n    //  * @return Tag[] Returns an array of Tag objects\r\n    //  */\r\n    /*\r\n    public function findByExampleField($value)\r\n    {\r\n        return $this->createQueryBuilder('t')\r\n            ->andWhere('t.exampleField = :val')\r\n            ->setParameter('val', $value)\r\n            ->orderBy('t.id', 'ASC')\r\n            ->setMaxResults(10)\r\n            ->getQuery()\r\n            ->getResult()\r\n        ;\r\n    }\r\n    */\r\n\r\n    /*\r\n    public function findOneBySomeField($value): ?Tag\r\n    {\r\n        return $this->createQueryBuilder('t')\r\n            ->andWhere('t.exampleField = :val')\r\n            ->setParameter('val', $value)\r\n            ->getQuery()\r\n            ->getOneOrNullResult()\r\n        ;\r\n    }\r\n    */\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Repository/TagRepository.php	(revision f7dbde30bc7518711944450c8442e846df249c56)
+++ src/Repository/TagRepository.php	(date 1593300461428)
@@ -47,4 +47,13 @@
         ;
     }
     */
+   /* public function findTagById($id){
+        $query = $this
+            ->createQueryBuilder('p')
+            ->select('p')
+            ->andWhere('p.id IN (:tagId)')
+            ->setParameter('tagId', $id);
+        $result = $query->getQuery();
+        return $result->getScalarResult();
+    }*/
 }
Index: src/Controller/SearchController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\Post;\r\nuse App\\Form\\SearchForm;\r\nuse App\\Search\\SearchEntity;\r\nuse App\\Repository\\PostRepository;\r\nuse App\\Repository\\TagRepository;\r\nuse App\\Repository\\UserRepository;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\n\r\n/**\r\n * Class SearchController\r\n * @package App\\Controller\r\n * @Route(\"/search\")\r\n */\r\nclass SearchController extends AbstractController\r\n{\r\n    /**\r\n     * @Route(\"/\", name=\"search\")\r\n     */\r\n    public function search(Request $request,TagRepository $tagRepository,PostRepository $postRepository,UserRepository $userRepository)\r\n    {\r\n        $search=new SearchEntity();\r\n        $form= $this->createForm(SearchForm::class,$search);\r\n        $form->handleRequest($request);\r\n\r\n        if ($form->isSubmitted() && $form->isValid()){\r\n            if ($search->choice==\"Users\"){\r\n                $users=$userRepository->findSearch($search,$request);\r\n                if ($search->view==\"Normal\"){\r\n                    $view='search/usersSearch.html.twig';\r\n                }\r\n                else{\r\n                    $view='search/sliderUser.html.twig';\r\n                }\r\n                return$this->render($view,[\r\n                    'users'=>$users,\r\n                    'tag'=>$search->motCle,\r\n                    'type'=>'User'\r\n                ]);\r\n            }\r\n            if ($search->choice==\"Tags\"){\r\n                $posts=$postRepository->findByTagName($search,$request);\r\n                if ($search->view==\"Normal\"){\r\n                    $view='search/postSearch.html.twig';\r\n                }\r\n                else{\r\n                    $view='search/sliderPost.html.twig';\r\n                }\r\n                return$this->render($view,[\r\n                    'posts'=>$posts,\r\n                    'tag'=>$search->motCle,\r\n                    'type'=>'TAG'\r\n                ]);\r\n            }\r\n            if ($search->choice==\"Post Title\"){\r\n                $posts=$postRepository->findByPostTitle($search,$request);\r\n                if ($search->view==\"Normal\"){\r\n                    $view='search/postSearch.html.twig';\r\n                }\r\n                else{\r\n                    $view='search/sliderPost.html.twig';\r\n                }\r\n                return$this->render($view,[\r\n                    'posts'=>$posts,\r\n                    'tag'=>$search->motCle,\r\n                    'type'=>'Post'\r\n                ]);\r\n            }\r\n            if ($search->choice==\"Description\"){\r\n                $posts=$postRepository->findDescriptipn($search,$request);\r\n                if ($search->view==\"Normal\"){\r\n                    $view='search/postSearch.html.twig';\r\n                }\r\n                else{\r\n                    $view='search/sliderPost.html.twig';\r\n                }\r\n                return$this->render($view,[\r\n                    'posts'=>$posts,\r\n                    'tag'=>$search->motCle,\r\n                    'type'=>'Description'\r\n                ]);\r\n            }\r\n\r\n        }\r\n        if ($request->query->get('choice')==\"Users\"){\r\n            $users=$userRepository->findSearch($search,$request);\r\n            if ($request->query->get('view')==\"Normal\"){\r\n                $view='search/usersSearch.html.twig';\r\n            }\r\n            else{\r\n                $view='search/sliderUser.html.twig';\r\n            }\r\n            return$this->render($view,[\r\n                'users'=>$users,\r\n                'tag'=>$search->motCle,\r\n                'type'=>'User'\r\n            ]);\r\n        }\r\n        if ($request->query->get('view')==\"Description\"){\r\n            $posts=$postRepository->findDescriptipn($search,$request);\r\n            if ($search->view==\"Normal\"){\r\n                $view='search/postSearch.html.twig';\r\n            }\r\n            else{\r\n                $view='search/sliderPost.html.twig';\r\n            }\r\n            return$this->render($view,[\r\n                'posts'=>$posts,\r\n                'tag'=>$search->motCle,\r\n                'type'=>'Description'\r\n            ]);\r\n        }\r\n        if ($request->query->get('view')==\"Post Title\") {\r\n            $posts = $postRepository->findByPostTitle($search, $request);\r\n            if ($search->view==\"Normal\"){\r\n                $view='search/postSearch.html.twig';\r\n            }\r\n            else{\r\n                $view='search/sliderPost.html.twig';\r\n            }\r\n            return$this->render($view,[\r\n                'posts'=>$posts,\r\n                'tag'=>$search->motCle,\r\n                'type'=>'Post'\r\n            ]);\r\n        }\r\n        if ($request->query->get('view')==\"Tags\"){\r\n            $posts=$postRepository->findByTagName($search,$request);\r\n            if ($search->view==\"Normal\"){\r\n                $view='search/postSearch.html.twig';\r\n            }\r\n            else{\r\n                $view='search/sliderPost.html.twig';\r\n            }\r\n            return$this->render($view,[\r\n                'posts'=>$posts,\r\n                'tag'=>$search->motCle,\r\n                'type'=>'TAG'\r\n            ]);\r\n        }\r\n        return $this->render('search/search.html.twig', [\r\n            'form'=>$form->createView()\r\n        ]);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/SearchController.php	(revision f7dbde30bc7518711944450c8442e846df249c56)
+++ src/Controller/SearchController.php	(date 1593300371588)
@@ -8,10 +8,12 @@
 use App\Repository\PostRepository;
 use App\Repository\TagRepository;
 use App\Repository\UserRepository;
+use phpDocumentor\Reflection\DocBlock\Tag;
+use phpDocumentor\Reflection\Type;
 use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\Routing\Annotation\Route;
-
 /**
  * Class SearchController
  * @package App\Controller
@@ -148,6 +150,23 @@
         ]);
     }
 
+    /**
+     * @param $id
+     * @param PostRepository $repository
+     * @param Request $request
+     * @return Response
+     * @Route("/tags/{id<\d+>}",name="tagg")
+     */
+public function tagFinder($id,PostRepository $repository,Request $request,TagRepository $tagRepository){
+    $tagName=$tagRepository->findTagById($id);
+    $posts = $repository->findPostByTag($tagName,$request);
+    dd($posts);
+    return $this->render('search/postSearch.html.twig', [
+        'posts' => $posts,
+        'type'=>'TAG',
+        'tag'=>'salem'
+    ]);
 
+}
 
 }
Index: public/home.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- public/home.js	(date 1593291843842)
+++ public/home.js	(date 1593291843842)
@@ -0,0 +1,26 @@
+sort=document.querySelector('.sort_ajax')
+sort.querySelectorAll('a').forEach((a=> {
+    a.addEventListener('click',e=>{
+        e.preventDefault();
+      var   url=a.getAttribute('href');
+        getUrl(url);
+    })
+}))
+async function getUrl(url) {
+    var content = document.querySelector('.content_ajax')
+    const response=await fetch(url,{
+        headers:{
+            'Content-Type': 'application/json',
+            'Accept': 'application/json',
+        }
+            .then((response) => response.json())
+            .then((messages) => {console.log("messages");})
+    })
+    if (response.status>=200 && response.status<300){
+        const data = await response.json();
+        content.innerHTML=data.content;
+    }
+    else {
+        console.error(response)
+    }
+}
\ No newline at end of file
