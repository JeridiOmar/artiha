Index: templates/search/sliderPost.html.twig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% extends'base.html.twig' %}\r\n{% block stylesheets %}\r\n    <link rel=\"stylesheet\" href=\"{{ asset('slider.css') }}\">\r\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\">\r\n    <link rel=\"stylesheet\" href=\"{{ asset('styles/slideeStyle.css') }}\">\r\n\r\n{% endblock %}\r\n\r\n{% block body %}\r\n    <div class=\"swiper-container m-4\">\r\n        <div class=\"swiper-wrapper\">\r\n            {% for post in posts %}\r\n                <div class=\"swiper-slide\">\r\n\r\n                    <div class=\"card img-fluid \" style=\"width:540px ;height: 600px\">\r\n                        <h5 class=\"card-title ml-2\">\r\n                            <a href=\"{{ path('profile',{id:post.user.id}) }}\">\r\n                                <img class=\"rounded-circle mr-2-3\" src=\"{{ post.user.profilePicture }}\"\r\n                                     href=\"{{ path('profile',{id:post.user.id}) }} \" alt=\"profilPicture\" height=\"35px\" width=\"35px\"></a>\r\n                            <a href=\"{{ path('profile',{id:post.user.id}) }}\" class=\"ml-2 text-warning\">{{ post.user.nom }}</a>\r\n                        </h5>\r\n                        <h6 class=\"card-subtitle mb-2 text-muted\">\r\n                            <i class=\"fa fa-hourglass\" style=' padding:5px;font-size:18px;color:rgba(251,235,61,0.95)'></i>\r\n                            {{ post.createdAt | date(\"F jS \\\\a\\\\t g:ia\") }}\r\n                        </h6>\r\n\r\n                        {% if post.type == \"PHOTO\" %}\r\n\r\n                            <div class=\"card-opacity\">\r\n                                <img class=\"card-img-top\" style=\"width:540px;height:270px\" src=\"{{ post.content }}\" alt=\"Card image\">\r\n                            </div>\r\n                        {% elseif post.type== \"video\" %}\r\n                            <div class=\"card-opacity2\">\r\n\r\n                                <video class=\"img-fluid\" style=\"width: 540px;height: 270px\" controls playsinline autoplay >\r\n                                    <source src=\"{{ asset(post.content) }}\" type=\"video/mp4\">\r\n                                </video>\r\n                            </div>\r\n\r\n                        {% endif %}\r\n\r\n\r\n                        <div class=\"card-img-top p-2 \">\r\n                        <h4 class=\"card-title card__title text-success\">{{ post.title }}</h4>\r\n                        <div>\r\n                            {% for c in post.categories %}\r\n\r\n                                <em class=\"text-muted  text-italic \"> - {{ c }}</em>\r\n\r\n                            {% endfor %}\r\n                        </div>\r\n                        <p class=\"card-text font-weight-bolder card_description text-dark\">{{ post.description|length > 50 ? post.description|slice(0, 50) ~ '...' : post.description  }}</p>\r\n                        {% for t in post.tags %}\r\n\r\n                            <a href=\"#\" class=\"text-warning text-italic \">#{{ t }}</a>\r\n\r\n                        {% endfor %}\r\n                        <div class=\"row\">\r\n                            <div class=\"col-5\">\r\n                                <h6 class=\"card-subtitle mb-2 text-muted color_comments_like\">\r\n                                    <i class='fas fa-thumbs-up color' style=\"padding:10px;font-size:20px;color:rgba(251,235,61,0.95)\"></i>\r\n                                    {{ post.nblikes }} likes\r\n                                </h6>\r\n                            </div>\r\n                            <div class=\"col-7 \">\r\n                                <h6 class=\"card-subtitle mb-2 ml-4 text-muted\" style=\"font-size: 15px\">\r\n                                    <i class='fas fa-comment-dots color_comments_like'\r\n                                       style=\"padding:10px;font-size:20px;color:rgba(251,235,61,0.95)\"></i>\r\n                                    {{ post.nbcomment }} comments\r\n                                </h6>\r\n                            </div>\r\n                        </div>\r\n                        <a href=\"{{ path('individual_post',{id:post.id}) }}\">\r\n                            <button type=\"button\" class=\"btn btn-warning text-light\">Go To Post</button>\r\n                        </a>\r\n\r\n                    </div>\r\n                </div>\r\n                </div>\r\n\r\n            {% endfor %}\r\n        </div>\r\n        <div class=\"swiper-pagination p-4\"></div>\r\n        <div class=\"search-pagination p-4\">{{ knp_pagination_render(posts) }}</div>\r\n\r\n    </div>\r\n\r\n    </div>\r\n\r\n{% endblock %}\r\n\r\n{% block javascripts %}\r\n    <script src=\"{{ asset('slider.js') }}\"></script>\r\n    <script>\r\n        let swiper = new Swiper('.swiper-container', {\r\n            effect: 'coverflow',\r\n            grabCursor: true,\r\n            centeredSlides: true,\r\n            slidesPerView: 'auto',\r\n            coverflowEffect: {\r\n                rotate: 30,\r\n                stretch: 0,\r\n                depth: 500,\r\n                modifier: 1,\r\n                slideShadows: true,\r\n            },\r\n            pagination: {\r\n                el: '.swiper-pagination',\r\n            },\r\n        });\r\n    </script>\r\n{% endblock %}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/search/sliderPost.html.twig	(revision 1f4aef12852ba94aac02da642be56ca346acecb8)
+++ templates/search/sliderPost.html.twig	(date 1594583406991)
@@ -24,7 +24,7 @@
                             {{ post.createdAt | date("F jS \\a\\t g:ia") }}
                         </h6>
 
-                        {% if post.type == "PHOTO" %}
+                        {% if post.type == "picture" %}
 
                             <div class="card-opacity">
                                 <img class="card-img-top" style="width:540px;height:270px" src="{{ post.content }}" alt="Card image">
Index: src/Entity/Post.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Entity;\r\n\r\nuse App\\Repository\\PostRepository;\r\nuse Doctrine\\Common\\Collections\\ArrayCollection;\r\nuse Doctrine\\Common\\Collections\\Collection;\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\n\r\n/**\r\n * @ORM\\Entity(repositoryClass=PostRepository::class)\r\n */\r\nclass Post\r\n{\r\n    /**\r\n     * @ORM\\Id()\r\n     * @ORM\\GeneratedValue()\r\n     * @ORM\\Column(type=\"integer\")\r\n     */\r\n    private $id;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=100)\r\n     */\r\n    private $title;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=100)\r\n     */\r\n    private $type;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     */\r\n    private $description;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"integer\", nullable=true)\r\n     */\r\n    private $nbcomment;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"integer\", nullable=true)\r\n     */\r\n    private $nblikes;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"datetime\")\r\n     */\r\n    private $createdAt;\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=Category::class, inversedBy=\"posts\")\r\n     */\r\n    private $Categories;\r\n\r\n    /**\r\n     * @ORM\\ManyToOne(targetEntity=User::class, inversedBy=\"posts\")\r\n     * @ORM\\JoinColumn(nullable=false)\r\n     */\r\n    private $user;\r\n\r\n    /**\r\n     * @ORM\\ManyToMany(targetEntity=Tag::class, inversedBy=\"posts\")\r\n     */\r\n    private $tags;\r\n\r\n    /**\r\n     * @ORM\\OneToOne(targetEntity=Content::class, cascade={\"persist\", \"remove\"})\r\n     * @ORM\\JoinColumn(nullable=false)\r\n     */\r\n    private $content;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=Comment::class, mappedBy=\"post\", orphanRemoval=true)\r\n     */\r\n    private $comments;\r\n\r\n    /**\r\n     * @ORM\\OneToMany(targetEntity=Like::class, mappedBy=\"post\", orphanRemoval=true)\r\n     */\r\n    private $likes;\r\n\r\n\r\n    public function __construct()\r\n    {\r\n        $this->Categories = new ArrayCollection();\r\n        $this->tags = new ArrayCollection();\r\n        $this->comments = new ArrayCollection();\r\n        $this->likes = new ArrayCollection();\r\n    }\r\n\r\n    public function getId(): ?int\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    public function getTitle(): ?string\r\n    {\r\n        return $this->title;\r\n    }\r\n\r\n    public function setTitle(string $title): self\r\n    {\r\n        $this->title = $title;\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getType(): ?string\r\n    {\r\n        return $this->type;\r\n    }\r\n\r\n    public function setType(string $type): self\r\n    {\r\n        $this->type = $type;\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getDescription(): ?string\r\n    {\r\n        return $this->description;\r\n    }\r\n\r\n    public function setDescription(?string $description): self\r\n    {\r\n        $this->description = $description;\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getNbcomment(): ?int\r\n    {\r\n        return $this->nbcomment;\r\n    }\r\n\r\n    public function setNbcomment(int $nbcomment): self\r\n    {\r\n        $this->nbcomment = $nbcomment;\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getNblikes(): ?int\r\n    {\r\n        return $this->nblikes;\r\n    }\r\n\r\n    public function setNblikes(int $nblikes): self\r\n    {\r\n        $this->nblikes = $nblikes;\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getCreatedAt(): ?\\DateTimeInterface\r\n    {\r\n        return $this->createdAt;\r\n    }\r\n\r\n    public function setCreatedAt(\\DateTimeInterface $createdAt): self\r\n    {\r\n        $this->createdAt = $createdAt;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Category[]\r\n     */\r\n    public function getCategories(): Collection\r\n    {\r\n        return $this->Categories;\r\n    }\r\n\r\n    public function addCategory(Category $category): self\r\n    {\r\n        if (!$this->Categories->contains($category)) {\r\n            $this->Categories[] = $category;\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function removeCategory(Category $category): self\r\n    {\r\n        if ($this->Categories->contains($category)) {\r\n            $this->Categories->removeElement($category);\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getUser(): ?User\r\n    {\r\n        return $this->user;\r\n    }\r\n\r\n    public function setUser(?User $user): self\r\n    {\r\n        $this->user = $user;\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Tag[]\r\n     */\r\n    public function getTags(): Collection\r\n    {\r\n        return $this->tags;\r\n    }\r\n\r\n    public function addTag(Tag $tag): self\r\n    {\r\n        if (!$this->tags->contains($tag)) {\r\n            $this->tags[] = $tag;\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function removeTag(Tag $tag): self\r\n    {\r\n        if ($this->tags->contains($tag)) {\r\n            $this->tags->removeElement($tag);\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getContent(): ?Content\r\n    {\r\n        return $this->content;\r\n    }\r\n\r\n    public function setContent(Content $content): self\r\n    {\r\n        $this->content = $content;\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function getLiked(){\r\n\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Comment[]\r\n     */\r\n    public function getComments(): Collection\r\n    {\r\n        return $this->comments;\r\n    }\r\n\r\n    public function addComment(Comment $comment): self\r\n    {\r\n        if (!$this->comments->contains($comment)) {\r\n            $this->comments[] = $comment;\r\n            $comment->setPost($this);\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function removeComment(Comment $comment): self\r\n    {\r\n        if ($this->comments->contains($comment)) {\r\n            $this->comments->removeElement($comment);\r\n            // set the owning side to null (unless already changed)\r\n            if ($comment->getPost() === $this) {\r\n                $comment->setPost(null);\r\n            }\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    /**\r\n     * @return Collection|Like[]\r\n     */\r\n    public function getLikes(): Collection\r\n    {\r\n        return $this->likes;\r\n    }\r\n\r\n    public function addLike(Like $like): self\r\n    {\r\n        if (!$this->likes->contains($like)) {\r\n            $this->likes[] = $like;\r\n            $like->setPost($this);\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function removeLike(Like $like): self\r\n    {\r\n        if ($this->likes->contains($like)) {\r\n            $this->likes->removeElement($like);\r\n            // set the owning side to null (unless already changed)\r\n            if ($like->getPost() === $this) {\r\n                $like->setPost(null);\r\n            }\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function isLikedByUser(User $user) : bool {\r\n        foreach ($this->likes as $like){\r\n            if ($like->getUser() === $user){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n\r\n    }\r\n    public function hasCommented(Comment $userComment) :  bool {\r\n        foreach ($this->comments as $comment){\r\n            if ($comment.getId() === $userComment.getId()){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Entity/Post.php	(revision 1f4aef12852ba94aac02da642be56ca346acecb8)
+++ src/Entity/Post.php	(date 1594583407002)
@@ -81,6 +81,11 @@
      */
     private $likes;
 
+    /**
+     * @ORM\Column(type="boolean")
+     */
+    private $isFixture;
+
 
     public function __construct()
     {
@@ -328,6 +333,18 @@
 
     }
 
+    public function getIsFixture(): ?bool
+    {
+        return $this->isFixture;
+    }
+
+    public function setIsFixture(bool $isFixture): self
+    {
+        $this->isFixture = $isFixture;
+
+        return $this;
+    }
+
 
 
 }
Index: fixtures/post.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>App\\Entity\\User:\r\n  User_{1..25}:\r\n    Sexe: \"male\"\r\n    Prenom: <firstName()>\r\n    username: <titleMale()>\r\n    Nom: <name()>\r\n    Email: <email()>\r\n    Password: <password()>\r\n    Bio: <text(100)>\r\n    Birthday: <dateTime()>\r\n    NumTel: <numberBetween(21000000,29990970)>\r\n    ProfilePicture: \"http://lorempixel.com/<numberBetween(400,800)>/<numberBetween(400,800)>\"\r\n    IsAdmin: \"false\"\r\n    IsDeleted: \"false\"\r\n\r\n  User2_{1..3}:\r\n    Sexe: \"male\"\r\n    Prenom: <titleMale()>\r\n    username: <titleMale()>\r\n    Nom: <name()>\r\n    Email: <email()>\r\n    Password: <password()>\r\n    Bio: <text(100)>\r\n    Birthday: <dateTime()>\r\n    NumTel: <numberBetween(21000000,29990970)>\r\n    ProfilePicture: \"http://lorempixel.com/<numberBetween(400,800)>/<numberBetween(400,800)>\"\r\n    IsAdmin: \"false\"\r\n    IsDeleted: \"false\"\r\nApp\\Entity\\Tag:\r\n  Tag_{1..40}:\r\n    value: <text(12)>\r\n\r\n\r\nApp\\Entity\\Category:\r\n  Category_{1..10}:\r\n    intitule: <company()>\r\nApp\\Entity\\Picture:\r\n  Picture_{1..100}:\r\n    picturePath: \"http://lorempixel.com/<numberBetween(400,800)>/<numberBetween(400,800)>\"\r\n\r\n\r\nApp\\Entity\\Post:\r\n  post_{1..100}:\r\n    title: <state()>\r\n    nblikes: <numberBetween(0,1004)>\r\n    nbcomment: <numberBetween(0,4040)>\r\n    categories: '<numberBetween(1,5)>x @Category_*'\r\n    createdAt: <dateTime()>\r\n    description: <text(150)>\r\n    type: \"PHOTO\"\r\n    content: '@Picture_<current()>'\r\n    user : '@User_*'\r\n    tags: '<numberBetween(1,5)>x @Tag_*'\r\n\r\n\r\n\r\npost_{1..100}:\r\n  title: <state()>\r\n  nblikes: <numberBetween(0,1004)>\r\n  nbcomment: <numberBetween(0,4040)>\r\n  categories: '<numberBetween(1,5)>x @Category_*'\r\n  createdAt: <dateTime()>\r\n  description: <text(150)>\r\n  type: \"PHOTO\"\r\n  content: '_<current()>'\r\n  user : '@User_*'\r\n  tags: '<numberBetween(1,5)>x @Tag_*'
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- fixtures/post.yaml	(revision 1f4aef12852ba94aac02da642be56ca346acecb8)
+++ fixtures/post.yaml	(date 1594583407010)
@@ -1,8 +1,8 @@
 App\Entity\User:
-  User_{1..25}:
+  User_{1..30}:
     Sexe: "male"
     Prenom: <firstName()>
-    username: <titleMale()>
+    username: <company()>
     Nom: <name()>
     Email: <email()>
     Password: <password()>
@@ -12,6 +12,8 @@
     ProfilePicture: "http://lorempixel.com/<numberBetween(400,800)>/<numberBetween(400,800)>"
     IsAdmin: "false"
     IsDeleted: "false"
+    subscribedTo: '<numberBetween(1,15)>x @User_*'
+    subscribers: '<numberBetween(1,15)>x @User_*'
 
   User2_{1..3}:
     Sexe: "male"
@@ -34,10 +36,16 @@
 App\Entity\Category:
   Category_{1..10}:
     intitule: <company()>
+
 App\Entity\Picture:
   Picture_{1..100}:
     picturePath: "http://lorempixel.com/<numberBetween(400,800)>/<numberBetween(400,800)>"
 
+App\Entity\Text:
+  Text_{1..50}:
+    text: <text(150)>
+
+
 
 App\Entity\Post:
   post_{1..100}:
@@ -47,21 +55,21 @@
     categories: '<numberBetween(1,5)>x @Category_*'
     createdAt: <dateTime()>
     description: <text(150)>
-    type: "PHOTO"
+    type: "picture"
     content: '@Picture_<current()>'
     user : '@User_*'
+    is_fixture: "true"
     tags: '<numberBetween(1,5)>x @Tag_*'
 
-
-
-post_{1..100}:
-  title: <state()>
-  nblikes: <numberBetween(0,1004)>
-  nbcomment: <numberBetween(0,4040)>
-  categories: '<numberBetween(1,5)>x @Category_*'
-  createdAt: <dateTime()>
-  description: <text(150)>
-  type: "PHOTO"
-  content: '_<current()>'
-  user : '@User_*'
-  tags: '<numberBetween(1,5)>x @Tag_*'
\ No newline at end of file
+  post1_{1..50}:
+    title: <state()>
+    nblikes: <numberBetween(0,1004)>
+    nbcomment: <numberBetween(0,4040)>
+    categories: '<numberBetween(1,5)>x @Category_*'
+    createdAt: <dateTime()>
+    description: <text(150)>
+    type: "text"
+    content: '@Text_<current()>'
+    user: '@User_*'
+    is_fixture: "true"
+    tags: '<numberBetween(1,5)>x @Tag_*'
Index: templates/post/card.html.twig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><div class=\"card img-fluid post  \" style=\"width:760px\">\r\n    <h5 class=\"card-title\">\r\n        <a href=\"{{ path('profile',{id:post.user.id}) }}\">\r\n            <img class=\"rounded-circle mr-2-3\"  src=\"{{ post.user.profilePicture }}\"\r\n                 href=\"{{ path('profile',{id:post.user.id}) }} \" alt=\"\" height=\"30px\" width=\"30px\"></a>\r\n        <a href=\"{{ path('profile',{id:post.user.id}) }}\" class=\"ml-2 text-warning\">{{ post.user.nom }}</a>\r\n    </h5>\r\n    <h6 class=\"card-subtitle mb-2 text-muted\">\r\n        <i class=\"fa fa-hourglass\" style=' padding:5px;font-size:18px;color:rgba(251,235,61,0.95)'></i>\r\n        {{ post.createdAt | date(\"F jS \\\\a\\\\t g:ia\") }}\r\n    </h6>\r\n        {% if post.type == \"PHOTO\" %}\r\n\r\n            <div class=\"card-opacity\">\r\n            <img class=\"card-img-top\" style=\"width:760px;height:450px\" src=\"{{ post.content }}\" alt=\"Card image\">\r\n    </div>\r\n            <div class=\"card__type\"> {{ post.type }}</div>\r\n\r\n        {% elseif post.type== \"video\" %}\r\n    <div class=\"card-opacity2\">\r\n\r\n        <video class=\"img-fluid\" style=\"width: 760px;height: 450px\" controls playsinline >\r\n            <source src=\"{{ asset(post.content) }}\" type=\"video/mp4\">\r\n        </video>\r\n    </div>\r\n            <div class=\"card__type3\"> {{ post.type }}</div>\r\n\r\n        {% endif %}\r\n\r\n\r\n\r\n<div class=\"card-img-top p-2\">\r\n    <h4 class=\"card-title text-center text-black font-weight-bold text-secondary\">{{ post.title }}</h4>\r\n    <div>\r\n        {% for c in post.categories %}\r\n\r\n            <em class=\"text-muted  text-italic \"> - {{ c }}</em>\r\n\r\n        {% endfor %}\r\n    </div>\r\n    <p class=\"card-text font-weight-bolder card_description text-dark\">{{ post.description|length > 150 ? post.description|slice(0, 150) ~ '...' : post.description  }}</p>\r\n    {% for t in post.tags %}\r\n\r\n        <a href=\"{{ path('tagg',{id:t.id}) }}\"  class=\"text-warning text-italic \">#{{ t }}</a>\r\n\r\n    {% endfor %}\r\n    <div class=\"row\">\r\n        <div class=\"col-8\">\r\n            <h6 class=\"card-subtitle mb-2 text-black color_comments_like\">\r\n                <i class='fas fa-thumbs-up color' style=\"padding:10px;font-size:20px;color:rgba(251,235,61,0.95)\"></i>\r\n                {{ post.likes | length }} likes\r\n            </h6>\r\n        </div>\r\n        <div class=\"col-4\">\r\n            <h6 class=\"card-subtitle mb-2  text-black\">\r\n                <i class='fas fa-comment-dots color_comments_like'\r\n                   style=\"padding:10px;font-size:20px;color:rgba(251,235,61,0.95)\"></i>\r\n                {{ post.comments | length }} comments\r\n            </h6>\r\n        </div>\r\n    </div>\r\n    <a href=\"{{ path('individual_post',{id:post.id}) }}\">\r\n        <button type=\"button\" class=\"btn btn-warning text-light\">Go To Post</button>\r\n    </a>\r\n\r\n</div>\r\n</div>\r\n<style>\r\n    .search-field{\r\n        height: 50px;\r\n        padding: 10px;\r\n        border:none;\r\n        outline:none;\r\n        color: black;\r\n        background: linear-gradient(beige, snow);}\r\n\r\n</style>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- templates/post/card.html.twig	(revision 1f4aef12852ba94aac02da642be56ca346acecb8)
+++ templates/post/card.html.twig	(date 1594583407017)
@@ -9,7 +9,7 @@
         <i class="fa fa-hourglass" style=' padding:5px;font-size:18px;color:rgba(251,235,61,0.95)'></i>
         {{ post.createdAt | date("F jS \\a\\t g:ia") }}
     </h6>
-        {% if post.type == "PHOTO" %}
+        {% if post.type == "picture" %}
 
             <div class="card-opacity">
             <img class="card-img-top" style="width:760px;height:450px" src="{{ post.content }}" alt="Card image">
Index: src/Migrations/Version20200712100853.php
===================================================================
--- src/Migrations/Version20200712100853.php	(revision 1f4aef12852ba94aac02da642be56ca346acecb8)
+++ src/Migrations/Version20200712100853.php	(revision 1f4aef12852ba94aac02da642be56ca346acecb8)
@@ -1,37 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace DoctrineMigrations;
-
-use Doctrine\DBAL\Schema\Schema;
-use Doctrine\Migrations\AbstractMigration;
-
-/**
- * Auto-generated Migration: Please modify to your needs!
- */
-final class Version20200712100853 extends AbstractMigration
-{
-    public function getDescription() : string
-    {
-        return '';
-    }
-
-    public function up(Schema $schema) : void
-    {
-        // this up() migration is auto-generated, please modify it to your needs
-        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \'mysql\'.');
-
-        $this->addSql('CREATE TABLE critique (id INT AUTO_INCREMENT NOT NULL, sender_id INT NOT NULL, reciver_id INT NOT NULL, content LONGTEXT NOT NULL, created_at DATETIME NOT NULL, INDEX IDX_1F950324F624B39D (sender_id), INDEX IDX_1F95032493173582 (reciver_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE `utf8mb4_unicode_ci` ENGINE = InnoDB');
-        $this->addSql('ALTER TABLE critique ADD CONSTRAINT FK_1F950324F624B39D FOREIGN KEY (sender_id) REFERENCES user (id)');
-        $this->addSql('ALTER TABLE critique ADD CONSTRAINT FK_1F95032493173582 FOREIGN KEY (reciver_id) REFERENCES user (id)');
-    }
-
-    public function down(Schema $schema) : void
-    {
-        // this down() migration is auto-generated, please modify it to your needs
-        $this->abortIf($this->connection->getDatabasePlatform()->getName() !== 'mysql', 'Migration can only be executed safely on \'mysql\'.');
-
-        $this->addSql('DROP TABLE critique');
-    }
-}
Index: src/Controller/PostFormController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Controller;\r\n\r\nuse App\\Entity\\Picture;\r\nuse App\\Entity\\Post;\r\nuse App\\Entity\\Recording;\r\nuse App\\Entity\\Tag;\r\nuse App\\Entity\\Text;\r\nuse App\\Entity\\User;\r\nuse App\\Entity\\Video;\r\nuse App\\Form\\PostType;\r\nuse App\\Repository\\TagRepository;\r\nuse Doctrine\\ORM\\EntityManagerInterface;\r\nuse FOS\\CKEditorBundle\\Form\\Type\\CKEditorType;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType;\r\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\r\nuse Symfony\\Component\\Form\\SubmitButton;\r\nuse Symfony\\Component\\HttpFoundation\\File\\Exception\\FileException;\r\nuse Symfony\\Component\\HttpFoundation\\Request;\r\nuse Symfony\\Component\\HttpFoundation\\Response;\r\nuse Symfony\\Component\\Routing\\Annotation\\Route;\r\nuse Symfony\\Component\\Validator\\Constraints\\File;\r\nuse Symfony\\Component\\Validator\\Constraints\\Image;\r\n\r\nclass PostFormController extends AbstractController\r\n{\r\n    /**\r\n     * @Route(\"/post/text/{id?0}\", name=\"post_form\")\r\n     * @param Request $request\r\n     * @param Post|null $post\r\n     * @param EntityManagerInterface $entityManager\r\n     * @param TagRepository $tagrepo\r\n     * @return Response\r\n     */\r\n    public function index(Request $request,Post $post = null,EntityManagerInterface $entityManager,TagRepository $tagrepo)\r\n    {\r\n        if(!$this->isGranted(\"IS_AUTHENTICATED_FULLY\"))\r\n        {\r\n            return $this->redirectToRoute(\"app_login\");\r\n        }\r\n        if(! $post) {\r\n            $post = new Post();\r\n        }\r\n        //temporary user\r\n//        $user=$entityManager->getRepository(User::class)->findOneBy(['id'=>2]);\r\n        //dd($user->getPosts()->toArray(),$entityManager->getRepository(User::class)->findOneBy(['id'=>1])->getPosts()->toArray());\r\n        $user=$this->getUser();\r\n        $form=$this->createForm(PostType::class,$post);\r\n        $form->add('text',TextareaType::class,array(\r\n            'mapped'=>false,\r\n            'attr'=>[\"rows\" => 4,'placeholder'=>'amaze us with your creativity!'],\r\n            ))\r\n            ->add('submit',SubmitType::class);\r\n        $form->handleRequest($request);\r\n        if($form->isSubmitted() && $form->isValid()){\r\n            if (!($post->getCreatedAt())) {\r\n                $post->setCreatedAt(new \\DateTime());\r\n                $post->setUser($user);\r\n                $post->setType('text');\r\n            }\r\n            $content = new Text();\r\n            $content->setText($form['text']->getData());\r\n            $post->setContent($content);\r\n            $tagData = explode(\" \", $form->get('tags')->getData());\r\n            //dd(!$tagData[0]===\"\",$form->get('tags')->getData());\r\n            if (!($tagData[0] === \"\")) {\r\n                foreach ($tagData as $item) {\r\n                    if ($item[0] == \"#\") {\r\n                        $item = str_replace(\"#\", \"\", $item);\r\n                        $tagfound = $tagrepo->findOneBy(['value' => $item]);\r\n                        //dd($tagfound);\r\n                        if (!isset($tagfound)) {\r\n                            $tag = new Tag();\r\n                            $tag->setValue($item);\r\n                            $tag->addPost($post);\r\n                            $post->addTag($tag);\r\n                            $entityManager->persist($tag);\r\n                        } else {\r\n                            $tagfound->addPost($post);\r\n                            $post->addTag($tagfound);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n//            dd($user);\r\n            $entityManager->persist($post);\r\n            $entityManager->flush();\r\n            return $this->redirectToRoute('post');\r\n        }\r\n        $tagforrender=\"\";\r\n        $textforrender=null;\r\n        if ($post->getContent()) {\r\n            $textforrender = $post->getContent()->getChildContent();\r\n            foreach ($post->getTags()->toArray() as $a) {\r\n                $tagforrender .= \"#\" . $a . \" \";\r\n            }\r\n        }\r\n\r\n\r\n        //dd($tagforrender);\r\n        return $this->render('post_form/text.html.twig', [\r\n            'form' => $form->createView(),\r\n            'tag' => $tagforrender,\r\n            'text'=>$textforrender\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/post/picture/{id?0}\")\r\n     * @param Request $request\r\n     * @param Post|null $post\r\n     * @param EntityManagerInterface $entityManager\r\n     * @param TagRepository $tagrepo\r\n     * @return Response\r\n     */\r\n    public function index2(Request $request,Post $post = null,EntityManagerInterface $entityManager,TagRepository $tagrepo)\r\n    {\r\n        if(!$this->isGranted(\"IS_AUTHENTICATED_FULLY\"))\r\n        {\r\n            return $this->redirectToRoute(\"app_login\");\r\n        }\r\n        if(!$post){\r\n            $post=new Post();\r\n        }\r\n//        $user=$entityManager->getRepository(User::class)->findOneBy(['id'=>2]);\r\n        $user=$this->getUser();\r\n        $form=$this->createForm(PostType::class,$post);\r\n        $form->add('picture',FileType::class,array('mapped'=>false,\r\n            'required'=>true ,\r\n            'constraints'=>[new Image()]))\r\n            ->add('submit',SubmitType::class);\r\n        $form->handleRequest($request);\r\n        if($form->isSubmitted() && $form->isValid()){\r\n            $post->setCreatedAt(new \\DateTime());\r\n            $post->setType('picture');\r\n            if(isset($form['picture'])){\r\n                $picture=$form['picture']->getData();\r\n                $picpath=md5(uniqid()).$picture->getClientOriginalName();\r\n                $destination=__DIR__.\"/../../public/uploads/files/post_pictures\";\r\n                try{\r\n                    $picture->move($destination,$picpath);\r\n                    $content=new Picture();\r\n                    $content->setPicturePath('/uploads/files/post_pictures/'.$picpath);\r\n                    $post->setContent($content);\r\n                }\r\n                catch (FileException $fe){\r\n                    echo $fe;\r\n                }\r\n            }\r\n            $post->setUser($user);\r\n            $tagData=explode(\" \",$form->get('tags')->getData());\r\n            if(!($tagData[0]===\"\")){\r\n                foreach ($tagData as $item) {\r\n                    if($item[0]===\"#\"){\r\n                        $item=str_replace(\"#\",\"\",$item);\r\n                        $tagfound=$tagrepo->findOneBy(['value'=>$item]);\r\n                        if(!isset($tagfound)){\r\n                            $tag=new Tag();\r\n                            $tag->setValue($item);\r\n                            $tag->addPost($post);\r\n                            $entityManager->persist($tag);\r\n                        }\r\n                        else{\r\n                            $tagfound->addPost($post);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            $entityManager->persist($post);\r\n            $entityManager->flush();\r\n            return $this->redirectToRoute('post');\r\n\r\n        }\r\n\r\n        $tagforrender=\"\";\r\n        $picforrender=null;\r\n        if ($post->getContent()) {\r\n            $picforrender = $post->getContent()->getChildContent();\r\n            foreach ($post->getTags()->toArray() as $a) {\r\n                $tagforrender .= \"#\" . $a . \" \";\r\n            }\r\n        }\r\n\r\n\r\n        //dd($tagforrender);\r\n        return $this->render('post_form/picture.html.twig', [\r\n            'form' => $form->createView(),\r\n            'tag' => $tagforrender,\r\n            'pic'=>$picforrender\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/post/recording/{id?0}\")\r\n     * @param Request $request\r\n     * @param Post $post\r\n     * @param EntityManagerInterface $entityManager\r\n     * @param TagRepository $tagrepo\r\n     * @return Response\r\n     */\r\n    public function index3(Request $request,Post $post = null, EntityManagerInterface $entityManager,TagRepository $tagrepo)\r\n    {\r\n        if(!$this->isGranted(\"IS_AUTHENTICATED_FULLY\"))\r\n        {\r\n            return $this->redirectToRoute(\"app_login\");\r\n        }\r\n        if (!$post) {\r\n            $post = new Post();\r\n        }\r\n//        $user=$entityManager->getRepository(User::class)->findOneBy(['id'=>2]);\r\n        $user=$this->getUser();\r\n        $form=$this->createForm(PostType::class,$post);\r\n        $form->add('recording',FileType::class,array('mapped'=>false,\r\n            'required'=>true ,\r\n            'constraints'=>[new File(['mimeTypes'=>['audio/*']])]))\r\n            ->add('submit',SubmitType::class);\r\n        $form->handleRequest($request);\r\n        if($form->isSubmitted() && $form->isValid()){\r\n            $post->setCreatedAt(new \\DateTime());\r\n            $post->setType('recording');\r\n            if(isset($form['recording'])){\r\n                $rec=$form['recording']->getData();\r\n                $recordingPath=md5(uniqid()).$rec->getClientOriginalName();\r\n                $destination=__DIR__.\"/../../public/uploads/files/post_recordings\";\r\n                try{\r\n                    $rec->move($destination,$recordingPath);\r\n                    $content=new Recording();\r\n                    $content->setRecordingPath('/uploads/files/post_recordings/'.$recordingPath);\r\n                    $post->setContent($content);\r\n                }\r\n                catch (FileException $fe){\r\n                    echo $fe;\r\n                }\r\n            }\r\n            $post->setUser($user);\r\n            $tagData=explode(\" \",$form->get('tags')->getData());\r\n            if(!($tagData[0]===\"\")){\r\n            foreach ($tagData as $item) {\r\n                if($item[0]==\"#\"){\r\n                    $item=str_replace(\"#\",\"\",$item);\r\n                    $tagfound=$tagrepo->findOneBy(['value'=>$item]);\r\n                    if(!isset($tagfound)){\r\n                        $tag=new Tag();\r\n                        $tag->setValue($item);\r\n                        $tag->addPost($post);\r\n                        $entityManager->persist($tag);\r\n                    }\r\n                    else{\r\n                        $tagfound->addPost($post);\r\n                    }\r\n                }\r\n            }\r\n            }\r\n\r\n            $entityManager->persist($post);\r\n            $entityManager->flush();\r\n            return $this->redirectToRoute('post');\r\n\r\n        }\r\n\r\n        $tagforrender=\"\";\r\n        $recforrender=null;\r\n        if ($post->getContent()) {\r\n            $recforrender = $post->getContent()->getChildContent();\r\n            foreach ($post->getTags()->toArray() as $a) {\r\n                $tagforrender .= \"#\" . $a . \" \";\r\n            }\r\n        }\r\n\r\n\r\n        //dd($tagforrender);\r\n        return $this->render('post_form/recording.html.twig', [\r\n            'form' => $form->createView(),\r\n            'tag' => $tagforrender,\r\n            'rec'=>$recforrender\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/post/video/{id?0}\")\r\n     * @param Request $request\r\n     * @param Post $post\r\n     * @param EntityManagerInterface $entityManager\r\n     * @param TagRepository $tagrepo\r\n     * @return Response\r\n     */\r\n    public function index4(Request $request,Post $post = null,EntityManagerInterface $entityManager,TagRepository $tagrepo)\r\n    {\r\n        if(!$this->isGranted(\"IS_AUTHENTICATED_FULLY\"))\r\n        {\r\n            return $this->redirectToRoute(\"app_login\");\r\n        }\r\n        if(!$post) {\r\n            $post = new Post();\r\n        }\r\n//        $user=$entityManager->getRepository(User::class)->findOneBy(['id'=>2]);\r\n        $user=$this->getUser();\r\n        $form=$this->createForm(PostType::class,$post);\r\n        $form->add('video',FileType::class,array('mapped'=>false,\r\n            'required'=>true ,\r\n            'constraints'=>[new File(['mimeTypes'=>['video/*','application/x-mpegURL']])],\r\n            ))\r\n            ->add('thumbnail',FileType::class,array('mapped'=>false,\r\n                'required'=>true,\r\n                'constraints'=>[new Image()]))\r\n            ->add('submit',SubmitType::class);\r\n        $form->handleRequest($request);\r\n        if($form->isSubmitted() && $form->isValid()){\r\n            $post->setCreatedAt(new \\DateTime());\r\n            $post->setType('video');\r\n            if($form['video']->getNormData()){\r\n                $video=$form['video']->getData();\r\n                $thumbnail=null;\r\n                if($form['thumbnail']->getNormData()) {\r\n                    $thumbnail=$form['thumbnail']->getData();\r\n                    $thumbpath=md5(uniqid()).$thumbnail->getClientOriginalName();\r\n                }\r\n                $vidpath=md5(uniqid()).$video->getClientOriginalName();\r\n                $destination=__DIR__.\"/../../public/uploads/files/post_videos\";\r\n                try{\r\n                    $thumbnail->move($destination.\"/thumbnails\",$thumbpath);\r\n                    $video->move($destination,$vidpath);\r\n                    $content=new Video();\r\n                    $content->setVideoPath('/uploads/files/post_videos/'.$vidpath);\r\n                    $content->setThumbnailPath(\"/uploads/files/post_videos/thumbnails/\".$thumbpath);\r\n                    $post->setContent($content);\r\n                }\r\n                catch (FileException $fe){\r\n                    echo $fe;\r\n                }\r\n            }\r\n            $post->setUser($user);\r\n            $tagData=explode(\" \",$form->get('tags')->getData());\r\n            if(!($tagData[0]===\"\")){\r\n            foreach ($tagData as $item) {\r\n                if($item[0]==\"#\"){\r\n                    $item=str_replace(\"#\",\"\",$item);\r\n                    $tagfound=$tagrepo->findOneBy(['value'=>$item]);\r\n                    if(!isset($tagfound)){\r\n                        $tag=new Tag();\r\n                        $tag->setValue($item);\r\n                        $tag->addPost($post);\r\n                        $entityManager->persist($tag);\r\n                    }\r\n                    else{\r\n                        $tagfound->addPost($post);\r\n                    }\r\n                }\r\n            }}\r\n\r\n            $entityManager->persist($post);\r\n            $entityManager->flush();\r\n            return $this->redirectToRoute('post');\r\n\r\n        }\r\n\r\n        $thumbnailtorender=null;\r\n        $tagforrender=\"\";\r\n        $videoforrender=null;\r\n        if ($post->getContent()) {\r\n            $videoforrender = $post->getContent()->getChildContent()['videoPath'];\r\n            $thumbnailtorender=$post->getContent()->getChildContent()['thumbnailPath'];\r\n            foreach ($post->getTags()->toArray() as $a) {\r\n                $tagforrender .= \"#\" . $a . \" \";\r\n            }\r\n        }\r\n\r\n\r\n        //dd($tagforrender);\r\n        return $this->render('post_form/video.html.twig', [\r\n            'form' => $form->createView(),\r\n            'tag' => $tagforrender,\r\n            'video'=>$videoforrender,\r\n            'thumbnail'=>$thumbnailtorender\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * @Route(\"/couleur\")\r\n     */\r\n    public function testcouleur(){\r\n        return $this->render('post_form/couleur.html.twig');\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Controller/PostFormController.php	(revision 1f4aef12852ba94aac02da642be56ca346acecb8)
+++ src/Controller/PostFormController.php	(date 1594583407057)
@@ -60,6 +60,9 @@
             if (!($post->getCreatedAt())) {
                 $post->setCreatedAt(new \DateTime());
                 $post->setUser($user);
+                $post->setNblikes(0);
+                $post->setNbcomment(0);
+                $post->setIsFixture(false);
                 $post->setType('text');
             }
             $content = new Text();
@@ -137,6 +140,9 @@
         if($form->isSubmitted() && $form->isValid()){
             $post->setCreatedAt(new \DateTime());
             $post->setType('picture');
+            $post->setNblikes(0);
+            $post->setNbcomment(0);
+            $post->setIsFixture(false);
             if(isset($form['picture'])){
                 $picture=$form['picture']->getData();
                 $picpath=md5(uniqid()).$picture->getClientOriginalName();
@@ -223,6 +229,10 @@
         if($form->isSubmitted() && $form->isValid()){
             $post->setCreatedAt(new \DateTime());
             $post->setType('recording');
+            $post->setIsFixture(false);
+
+            $post->setNblikes(0);
+            $post->setNbcomment(0);
             if(isset($form['recording'])){
                 $rec=$form['recording']->getData();
                 $recordingPath=md5(uniqid()).$rec->getClientOriginalName();
@@ -312,7 +322,11 @@
         $form->handleRequest($request);
         if($form->isSubmitted() && $form->isValid()){
             $post->setCreatedAt(new \DateTime());
+            $post->setIsFixture(false);
             $post->setType('video');
+
+            $post->setNblikes(0);
+            $post->setNbcomment(0);
             if($form['video']->getNormData()){
                 $video=$form['video']->getData();
                 $thumbnail=null;
